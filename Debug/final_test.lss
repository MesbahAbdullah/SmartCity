
final_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001da  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099d  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c7  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ff  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000185  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_u16ReadChannel>:
u16 ADC_u16ReadChannel(u8 channel_num)
{

	// select the corresponding channel 0~7
	
	channel_num &= 0b00000111;  // AND operation with 7
  92:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|channel_num;
  94:	97 b1       	in	r25, 0x07	; 7
  96:	98 7f       	andi	r25, 0xF8	; 248
  98:	89 2b       	or	r24, r25
  9a:	87 b9       	out	0x07, r24	; 7

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6

	// wait for conversion to complete
	// ADSC becomes '0' again
	
	while(ADCSRA & (1<<ADSC));
  a2:	36 99       	sbic	0x06, 6	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_u16ReadChannel+0x10>

	return (ADC);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
}
  aa:	08 95       	ret

000000ac <GAS_VidReadValue>:

// }
// u8 *x;
        /*This function is to read an analogue value from gas sensor MQ-135 and send the data using uart */
void GAS_VidReadValue()
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	2a 97       	sbiw	r28, 0x0a	; 10
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
   u16 adc_result0=0;
   u8 tempBuffer[10];
   adc_result0 = ADC_u16ReadChannel(GAS_PIN);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_u16ReadChannel>
   itoa(adc_result0,tempBuffer,10);
  c8:	4a e0       	ldi	r20, 0x0A	; 10
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	be 01       	movw	r22, r28
  ce:	6f 5f       	subi	r22, 0xFF	; 255
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	0e 94 ab 00 	call	0x156	; 0x156 <itoa>
   UART_VidSendString((u8*)tempBuffer);
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	0e 94 98 00 	call	0x130	; 0x130 <UART_VidSendString>
}
  de:	2a 96       	adiw	r28, 0x0a	; 10
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{

	
	UART_VidInt();	
  f0:	0e 94 8a 00 	call	0x114	; 0x114 <UART_VidInt>
		 
    UART_VidSendString((u8*)"HI HOW ARE U ");
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 98 00 	call	0x130	; 0x130 <UART_VidSendString>
	  //DHT11_VidStart();    
	  //_delay_ms(2000); //to call the DHT11_VidStart() again  


	  /* MQ-135 operating */
	  GAS_VidReadValue();
  fc:	0e 94 56 00 	call	0xac	; 0xac <GAS_VidReadValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	87 ea       	ldi	r24, 0xA7	; 167
 104:	91 e6       	ldi	r25, 0x61	; 97
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x20>
 110:	00 00       	nop
 112:	f4 cf       	rjmp	.-24     	; 0xfc <main+0xc>

00000114 <UART_VidInt>:
{
    /* Wait for data to be received */
    while(GET_BIT(UART_UCSRA , 7) == 0);
    /* Get and return received data from buffer */
    return UDR;
}
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	8b b9       	out	0x0b, r24	; 11
 118:	88 e1       	ldi	r24, 0x18	; 24
 11a:	8a b9       	out	0x0a, r24	; 10
 11c:	86 e8       	ldi	r24, 0x86	; 134
 11e:	80 bd       	out	0x20, r24	; 32
 120:	10 bc       	out	0x20, r1	; 32
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	89 b9       	out	0x09, r24	; 9
 126:	08 95       	ret

00000128 <UART_VidSentByte>:
 128:	5d 9b       	sbis	0x0b, 5	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <UART_VidSentByte>
 12c:	8c b9       	out	0x0c, r24	; 12
 12e:	08 95       	ret

00000130 <UART_VidSendString>:

void UART_VidSendString( u8 * Copy_ptrString ){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	8c 01       	movw	r16, r24

	u8 LOC_u8Iterator = 0 ;
 138:	c0 e0       	ldi	r28, 0x00	; 0

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' ){
 13a:	03 c0       	rjmp	.+6      	; 0x142 <UART_VidSendString+0x12>

		UART_VidSentByte( Copy_ptrString[ LOC_u8Iterator ] );
 13c:	0e 94 94 00 	call	0x128	; 0x128 <UART_VidSentByte>
		LOC_u8Iterator++ ;
 140:	cf 5f       	subi	r28, 0xFF	; 255

void UART_VidSendString( u8 * Copy_ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' ){
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	f1 1d       	adc	r31, r1
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <UART_VidSendString+0xc>
		UART_VidSentByte( Copy_ptrString[ LOC_u8Iterator ] );
		LOC_u8Iterator++ ;

	}

}
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <itoa>:
 156:	45 32       	cpi	r20, 0x25	; 37
 158:	51 05       	cpc	r21, r1
 15a:	20 f4       	brcc	.+8      	; 0x164 <itoa+0xe>
 15c:	42 30       	cpi	r20, 0x02	; 2
 15e:	10 f0       	brcs	.+4      	; 0x164 <itoa+0xe>
 160:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__itoa_ncheck>
 164:	fb 01       	movw	r30, r22
 166:	10 82       	st	Z, r1
 168:	cb 01       	movw	r24, r22
 16a:	08 95       	ret

0000016c <__itoa_ncheck>:
 16c:	bb 27       	eor	r27, r27
 16e:	4a 30       	cpi	r20, 0x0A	; 10
 170:	31 f4       	brne	.+12     	; 0x17e <__itoa_ncheck+0x12>
 172:	99 23       	and	r25, r25
 174:	22 f4       	brpl	.+8      	; 0x17e <__itoa_ncheck+0x12>
 176:	bd e2       	ldi	r27, 0x2D	; 45
 178:	90 95       	com	r25
 17a:	81 95       	neg	r24
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	0c 94 c2 00 	jmp	0x184	; 0x184 <__utoa_common>

00000182 <__utoa_ncheck>:
 182:	bb 27       	eor	r27, r27

00000184 <__utoa_common>:
 184:	fb 01       	movw	r30, r22
 186:	55 27       	eor	r21, r21
 188:	aa 27       	eor	r26, r26
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	aa 1f       	adc	r26, r26
 190:	a4 17       	cp	r26, r20
 192:	10 f0       	brcs	.+4      	; 0x198 <__utoa_common+0x14>
 194:	a4 1b       	sub	r26, r20
 196:	83 95       	inc	r24
 198:	50 51       	subi	r21, 0x10	; 16
 19a:	b9 f7       	brne	.-18     	; 0x18a <__utoa_common+0x6>
 19c:	a0 5d       	subi	r26, 0xD0	; 208
 19e:	aa 33       	cpi	r26, 0x3A	; 58
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <__utoa_common+0x20>
 1a2:	a9 5d       	subi	r26, 0xD9	; 217
 1a4:	a1 93       	st	Z+, r26
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	79 f7       	brne	.-34     	; 0x188 <__utoa_common+0x4>
 1aa:	b1 11       	cpse	r27, r1
 1ac:	b1 93       	st	Z+, r27
 1ae:	11 92       	st	Z+, r1
 1b0:	cb 01       	movw	r24, r22
 1b2:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <strrev>

000001b6 <strrev>:
 1b6:	dc 01       	movw	r26, r24
 1b8:	fc 01       	movw	r30, r24
 1ba:	67 2f       	mov	r22, r23
 1bc:	71 91       	ld	r23, Z+
 1be:	77 23       	and	r23, r23
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <strrev+0x4>
 1c2:	32 97       	sbiw	r30, 0x02	; 2
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <strrev+0x18>
 1c6:	7c 91       	ld	r23, X
 1c8:	6d 93       	st	X+, r22
 1ca:	70 83       	st	Z, r23
 1cc:	62 91       	ld	r22, -Z
 1ce:	ae 17       	cp	r26, r30
 1d0:	bf 07       	cpc	r27, r31
 1d2:	c8 f3       	brcs	.-14     	; 0x1c6 <strrev+0x10>
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
