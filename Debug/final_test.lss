
final_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00000b5a  00000bee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800164  00800164  00000cf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b27  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9b  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e98  00000000  00000000  000036aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ed  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c59  00000000  00000000  00004f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005b82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
  8a:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_VidInit>:
#include "ADC_interface.h"
#include <avr/io.h>

void ADC_VidInit(void)
{
    ADMUX = (1<<REFS0);
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_u16ReadChannel>:
}

u16 ADC_u16ReadChannel(u8 channel_num)
{
	// select the corresponding channel 0~7	
	channel_num &= 0b00000111;  // AND operation with 7
  9c:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|channel_num;
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	89 2b       	or	r24, r25
  a4:	87 b9       	out	0x07, r24	; 7
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	86 b9       	out	0x06, r24	; 6
	// wait for conversion to complete
	// ADSC becomes '0' again	
	while(ADCSRA & (1<<ADSC));
  ac:	36 99       	sbic	0x06, 6	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ADC_u16ReadChannel+0x10>
	return (ADC);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
}
  b4:	08 95       	ret

000000b6 <Request>:

u8 c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 e9       	ldi	r24, 0x93	; 147
  c4:	91 e1       	ldi	r25, 0x11	; 17
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <Request+0x10>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <Request+0x16>
  cc:	00 00       	nop
	_delay_ms(18);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	08 95       	ret

000000d6 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	WDT_VidON();
  d6:	0e 94 b7 03 	call	0x76e	; 0x76e <WDT_VidON>
	DDRD &= ~(1<<DHT11_PIN);
  da:	81 b3       	in	r24, 0x11	; 17
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	81 bb       	out	0x11, r24	; 17
	while( PIND & (1<<DHT11_PIN    ));
  e0:	84 99       	sbic	0x10, 4	; 16
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <Response+0xa>
	while((PIND & (1<<DHT11_PIN))==0);
  e4:	84 9b       	sbis	0x10, 4	; 16
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <Response+0xe>
	while( PIND & (1<<DHT11_PIN    ));
  e8:	84 99       	sbic	0x10, 4	; 16
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <Response+0x12>
	WDT_VidOFF();
  ec:	0e 94 c4 03 	call	0x788	; 0x788 <WDT_VidOFF>
  f0:	08 95       	ret

000000f2 <Receive_data>:
}

u8 Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	19 c0       	rjmp	.+50     	; 0x12a <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
  f8:	84 9b       	sbis	0x10, 4	; 16
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 102:	84 9b       	sbis	0x10, 4	; 16
 104:	09 c0       	rjmp	.+18     	; 0x118 <Receive_data+0x26>
		  c = (c<<1)|(0x01);	/* then its logic HIGH */
 106:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	81 60       	ori	r24, 0x01	; 1
 112:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
 116:	05 c0       	rjmp	.+10     	; 0x122 <Receive_data+0x30>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 118:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 11c:	88 0f       	add	r24, r24
 11e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
		while(PIND & (1<<DHT11_PIN));
 122:	84 99       	sbic	0x10, 4	; 16
 124:	fe cf       	rjmp	.-4      	; 0x122 <Receive_data+0x30>
	WDT_VidOFF();
}

u8 Receive_data()			/* receive data */
{	
	for (int q=0; q<8; q++)
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	28 30       	cpi	r18, 0x08	; 8
 12c:	31 05       	cpc	r19, r1
 12e:	24 f3       	brlt	.-56     	; 0xf8 <Receive_data+0x6>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 130:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 134:	08 95       	ret

00000136 <DHT11_VidStart>:

void DHT11_VidStart(void)
{	
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <DHT11_VidStart+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <DHT11_VidStart+0x8>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	char data[5];
	UART_VidSendString("Humidity =");
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	UART_VidSendString("Temp = ");
 14c:	8b e6       	ldi	r24, 0x6B	; 107
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	
		Request();		/* send start pulse */
 154:	0e 94 5b 00 	call	0xb6	; 0xb6 <Request>
		Response();		/* receive response */
 158:	0e 94 6b 00 	call	0xd6	; 0xd6 <Response>
        GPIO_VidSetPinValue(GPIO_PORTC,PIN7,LOW);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	67 e0       	ldi	r22, 0x07	; 7
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 49 02 	call	0x492	; 0x492 <GPIO_VidSetPinValue>

		I_RH=Receive_data();	/* store first eight bit in I_RH */
 166:	0e 94 79 00 	call	0xf2	; 0xf2 <Receive_data>
 16a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 16e:	0e 94 79 00 	call	0xf2	; 0xf2 <Receive_data>
 172:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 176:	0e 94 79 00 	call	0xf2	; 0xf2 <Receive_data>
 17a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 17e:	0e 94 79 00 	call	0xf2	; 0xf2 <Receive_data>
 182:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 186:	0e 94 79 00 	call	0xf2	; 0xf2 <Receive_data>
 18a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <CheckSum>

		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 18e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <I_RH>
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <D_RH>
 198:	9f 01       	movw	r18, r30
 19a:	29 0f       	add	r18, r25
 19c:	31 1d       	adc	r19, r1
 19e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <I_Temp>
 1a2:	29 0f       	add	r18, r25
 1a4:	31 1d       	adc	r19, r1
 1a6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <D_Temp>
 1aa:	29 0f       	add	r18, r25
 1ac:	31 1d       	adc	r19, r1
 1ae:	48 2f       	mov	r20, r24
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	24 17       	cp	r18, r20
 1b4:	35 07       	cpc	r19, r21
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <DHT11_VidStart+0x8c>
		{
			UART_VidSendString("Error");
 1b8:	83 e7       	ldi	r24, 0x73	; 115
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 1c0:	58 c0       	rjmp	.+176    	; 0x272 <DHT11_VidStart+0x13c>
		}
		
		else
		{	
			itoa(I_RH,data,10);
 1c2:	4a e0       	ldi	r20, 0x0A	; 10
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	be 01       	movw	r22, r28
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	cf 01       	movw	r24, r30
 1ce:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
			UART_VidSendString(data);
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			UART_VidSendString(".");
 1da:	89 e7       	ldi	r24, 0x79	; 121
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			
			itoa(D_RH,data,10);
 1e2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <D_RH>
 1e6:	4a e0       	ldi	r20, 0x0A	; 10
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	be 01       	movw	r22, r28
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
			UART_VidSendString(data);
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			UART_VidSendString("%");
 1fe:	8b e7       	ldi	r24, 0x7B	; 123
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>

			itoa(I_Temp,data,10);
 206:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <I_Temp>
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	be 01       	movw	r22, r28
 210:	6f 5f       	subi	r22, 0xFF	; 255
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
			UART_VidSendString(data);
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			UART_VidSendString(".");
 222:	89 e7       	ldi	r24, 0x79	; 121
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			
			itoa(D_Temp,data,10);
 22a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <D_Temp>
 22e:	4a e0       	ldi	r20, 0x0A	; 10
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
			UART_VidSendString(data);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			UART_VidSendString("C ");
 246:	8d e7       	ldi	r24, 0x7D	; 125
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			
			itoa(CheckSum,data,10);
 24e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <CheckSum>
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	be 01       	movw	r22, r28
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
			UART_VidSendString(data);
 262:	ce 01       	movw	r24, r28
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
			UART_VidSendString(" ");
 26a:	81 e7       	ldi	r24, 0x71	; 113
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	83 ec       	ldi	r24, 0xC3	; 195
 274:	99 e0       	ldi	r25, 0x09	; 9
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <DHT11_VidStart+0x140>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <DHT11_VidStart+0x146>
 27c:	00 00       	nop
		}
				
	_delay_ms(10);	
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <ESP8266_u8ValidateCmd>:
        Local_u8Result=ESP8266_u8ValidateCmd();
    }
}

u8 ESP8266_u8ValidateCmd()
{
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	c4 56       	subi	r28, 0x64	; 100
 29e:	d1 09       	sbc	r29, r1
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Response[100]={0};    
 2aa:	fe 01       	movw	r30, r28
 2ac:	31 96       	adiw	r30, 0x01	; 1
 2ae:	84 e6       	ldi	r24, 0x64	; 100
 2b0:	df 01       	movw	r26, r30
 2b2:	1d 92       	st	X+, r1
 2b4:	8a 95       	dec	r24
 2b6:	e9 f7       	brne	.-6      	; 0x2b2 <ESP8266_u8ValidateCmd+0x24>
    u8 Counter=0;
 2b8:	f1 2c       	mov	r15, r1
    u8 TrueFlag=0;

    while (Local_u8Response[Counter-1] != '\n' )
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <ESP8266_u8ValidateCmd+0x42>
    {
    	Local_u8Response [Counter] = UART_VidReceveByte();
 2bc:	0e 94 a0 03 	call	0x740	; 0x740 <UART_VidReceveByte>
 2c0:	e1 e0       	ldi	r30, 0x01	; 1
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ec 0f       	add	r30, r28
 2c6:	fd 1f       	adc	r31, r29
 2c8:	e0 0f       	add	r30, r16
 2ca:	f1 1f       	adc	r31, r17
 2cc:	80 83       	st	Z, r24
    	Counter++;
 2ce:	f3 94       	inc	r15
{
    u8 Local_u8Response[100]={0};    
    u8 Counter=0;
    u8 TrueFlag=0;

    while (Local_u8Response[Counter-1] != '\n' )
 2d0:	0f 2d       	mov	r16, r15
 2d2:	10 e0       	ldi	r17, 0x00	; 0
 2d4:	f8 01       	movw	r30, r16
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	8c 0f       	add	r24, r28
 2de:	9d 1f       	adc	r25, r29
 2e0:	e8 0f       	add	r30, r24
 2e2:	f9 1f       	adc	r31, r25
 2e4:	80 81       	ld	r24, Z
 2e6:	8a 30       	cpi	r24, 0x0A	; 10
 2e8:	49 f7       	brne	.-46     	; 0x2bc <ESP8266_u8ValidateCmd+0x2e>
    {
    	Local_u8Response [Counter] = UART_VidReceveByte();
    	Counter++;
    }

    if (Local_u8Response [0] == 'O' && Local_u8Response [1] == 'K')
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	8f 34       	cpi	r24, 0x4F	; 79
 2ee:	29 f4       	brne	.+10     	; 0x2fa <ESP8266_u8ValidateCmd+0x6c>
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	8b 34       	cpi	r24, 0x4B	; 75
 2f4:	21 f0       	breq	.+8      	; 0x2fe <ESP8266_u8ValidateCmd+0x70>

u8 ESP8266_u8ValidateCmd()
{
    u8 Local_u8Response[100]={0};    
    u8 Counter=0;
    u8 TrueFlag=0;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <ESP8266_u8ValidateCmd+0x72>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <ESP8266_u8ValidateCmd+0x72>
    	Counter++;
    }

    if (Local_u8Response [0] == 'O' && Local_u8Response [1] == 'K')
    	{
    	TrueFlag =1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
    	}

    	return TrueFlag;
}
 300:	cc 59       	subi	r28, 0x9C	; 156
 302:	df 4f       	sbci	r29, 0xFF	; 255
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	08 95       	ret

0000031a <ESP8266_VidInit>:
u8 volatile DataCome[200] ;


void ESP8266_VidInit()
{
    u8 Local_u8Result=0;    
 31a:	80 e0       	ldi	r24, 0x00	; 0
    while (Local_u8Result==0)
 31c:	06 c0       	rjmp	.+12     	; 0x32a <ESP8266_VidInit+0x10>
    {
        UART_VidSendString((u8*)"ATE0\r\n");
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
        Local_u8Result=ESP8266_u8ValidateCmd();
 326:	0e 94 47 01 	call	0x28e	; 0x28e <ESP8266_u8ValidateCmd>


void ESP8266_VidInit()
{
    u8 Local_u8Result=0;    
    while (Local_u8Result==0)
 32a:	88 23       	and	r24, r24
 32c:	c1 f3       	breq	.-16     	; 0x31e <ESP8266_VidInit+0x4>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	06 c0       	rjmp	.+12     	; 0x33e <ESP8266_VidInit+0x24>


    Local_u8Result=0;
    while (Local_u8Result==0)
    {
        UART_VidSendString((u8 *)"AT+CWMODE=3\r\n");
 332:	87 e8       	ldi	r24, 0x87	; 135
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
        Local_u8Result=ESP8266_u8ValidateCmd();
 33a:	0e 94 47 01 	call	0x28e	; 0x28e <ESP8266_u8ValidateCmd>
        Local_u8Result=ESP8266_u8ValidateCmd();
    }


    Local_u8Result=0;
    while (Local_u8Result==0)
 33e:	88 23       	and	r24, r24
 340:	c1 f3       	breq	.-16     	; 0x332 <ESP8266_VidInit+0x18>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	06 c0       	rjmp	.+12     	; 0x352 <ESP8266_VidInit+0x38>
    }

    Local_u8Result=0;
    while (Local_u8Result==0)
    {
        UART_VidSendString((u8 *)"AT+CIPMODE=0\r\n");
 346:	85 e9       	ldi	r24, 0x95	; 149
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
        Local_u8Result=ESP8266_u8ValidateCmd();
 34e:	0e 94 47 01 	call	0x28e	; 0x28e <ESP8266_u8ValidateCmd>
        UART_VidSendString((u8 *)"AT+CWMODE=3\r\n");
        Local_u8Result=ESP8266_u8ValidateCmd();
    }

    Local_u8Result=0;
    while (Local_u8Result==0)
 352:	88 23       	and	r24, r24
 354:	c1 f3       	breq	.-16     	; 0x346 <ESP8266_VidInit+0x2c>
    {
        UART_VidSendString((u8 *)"AT+CIPMODE=0\r\n");
        Local_u8Result=ESP8266_u8ValidateCmd();
    }
}
 356:	08 95       	ret

00000358 <ESP8266_VidConnectToWiFi>:

    	return TrueFlag;
}

void ESP8266_VidConnectToWiFi ( u8* SSID , u8* Password )
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	8c 01       	movw	r16, r24
 362:	eb 01       	movw	r28, r22
	UART_VidSendString((u8 *)  "AT+CWJAP=\"" );
 364:	84 ea       	ldi	r24, 0xA4	; 164
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	UART_VidSendString((u8 *)  SSID );
 36c:	c8 01       	movw	r24, r16
 36e:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	UART_VidSendString((u8 *) "\",\"" );
 372:	83 ec       	ldi	r24, 0xC3	; 195
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	UART_VidSendString((u8 *)  Password);
 37a:	ce 01       	movw	r24, r28
 37c:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
	UART_VidSendString((u8 *) "\"\r\n");
 380:	8f ea       	ldi	r24, 0xAF	; 175
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	89 e6       	ldi	r24, 0x69	; 105
 38c:	98 e1       	ldi	r25, 0x18	; 24
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <ESP8266_VidConnectToWiFi+0x36>
 396:	00 c0       	rjmp	.+0      	; 0x398 <ESP8266_VidConnectToWiFi+0x40>
 398:	00 00       	nop
	_delay_ms( 8000 );
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	08 95       	ret

000003a4 <GPIO_VidSetPinDirection>:
#include "GPIO_private.h"


void GPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8DIR )
{
    switch(Copy_u8Port)
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	19 f1       	breq	.+70     	; 0x3ee <GPIO_VidSetPinDirection+0x4a>
 3a8:	30 f0       	brcs	.+12     	; 0x3b6 <GPIO_VidSetPinDirection+0x12>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	e1 f1       	breq	.+120    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <GPIO_VidSetPinDirection+0x10>
 3b2:	54 c0       	rjmp	.+168    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3b4:	08 95       	ret
    {
    case GPIO_PORTA :
        if(Copy_u8DIR==INPUT)
 3b6:	41 11       	cpse	r20, r1
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <GPIO_VidSetPinDirection+0x2e>
             CLR_BIT(DDRA , Copy_u8Pin);
 3ba:	2a b3       	in	r18, 0x1a	; 26
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <GPIO_VidSetPinDirection+0x22>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <GPIO_VidSetPinDirection+0x1e>
 3ca:	80 95       	com	r24
 3cc:	82 23       	and	r24, r18
 3ce:	8a bb       	out	0x1a, r24	; 26
 3d0:	08 95       	ret
        else if (Copy_u8DIR==OUTPUT)     
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <GPIO_VidSetPinDirection+0x34>
 3d6:	5c c0       	rjmp	.+184    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
            SET_BIT(DDRA,Copy_u8Pin);
 3d8:	2a b3       	in	r18, 0x1a	; 26
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <GPIO_VidSetPinDirection+0x40>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <GPIO_VidSetPinDirection+0x3c>
 3e8:	82 2b       	or	r24, r18
 3ea:	8a bb       	out	0x1a, r24	; 26
 3ec:	08 95       	ret
        break;
    case GPIO_PORTB :
         if(Copy_u8DIR==INPUT)
 3ee:	41 11       	cpse	r20, r1
 3f0:	0c c0       	rjmp	.+24     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
             CLR_BIT(DDRB , Copy_u8Pin);
 3f2:	27 b3       	in	r18, 0x17	; 23
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <GPIO_VidSetPinDirection+0x5a>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <GPIO_VidSetPinDirection+0x56>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	87 bb       	out	0x17, r24	; 23
 408:	08 95       	ret
        else if (Copy_u8DIR==OUTPUT)     
 40a:	41 30       	cpi	r20, 0x01	; 1
 40c:	09 f0       	breq	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	40 c0       	rjmp	.+128    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
            SET_BIT(DDRB,Copy_u8Pin);
 410:	27 b3       	in	r18, 0x17	; 23
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	87 bb       	out	0x17, r24	; 23
 424:	08 95       	ret
        break;
    case GPIO_PORTC :
         if(Copy_u8DIR==INPUT)
 426:	41 11       	cpse	r20, r1
 428:	0c c0       	rjmp	.+24     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
             CLR_BIT(DDRC , Copy_u8Pin);
 42a:	24 b3       	in	r18, 0x14	; 20
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	84 bb       	out	0x14, r24	; 20
 440:	08 95       	ret
        else if (Copy_u8DIR==OUTPUT)     
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	29 f5       	brne	.+74     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
            SET_BIT(DDRC,Copy_u8Pin);
 446:	24 b3       	in	r18, 0x14	; 20
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	84 bb       	out	0x14, r24	; 20
 45a:	08 95       	ret
        break;
    case GPIO_PORTD :
         if(Copy_u8DIR==INPUT)
 45c:	41 11       	cpse	r20, r1
 45e:	0c c0       	rjmp	.+24     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
             CLR_BIT(DDRD , Copy_u8Pin);
 460:	21 b3       	in	r18, 0x11	; 17
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	81 bb       	out	0x11, r24	; 17
 476:	08 95       	ret
        else if (Copy_u8DIR==OUTPUT)     
 478:	41 30       	cpi	r20, 0x01	; 1
 47a:	51 f4       	brne	.+20     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
            SET_BIT(DDRD,Copy_u8Pin);
 47c:	21 b3       	in	r18, 0x11	; 17
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	82 2b       	or	r24, r18
 48e:	81 bb       	out	0x11, r24	; 17
 490:	08 95       	ret

00000492 <GPIO_VidSetPinValue>:

}

void GPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value )
{
    switch(Copy_u8Port)
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	19 f1       	breq	.+70     	; 0x4dc <GPIO_VidSetPinValue+0x4a>
 496:	30 f0       	brcs	.+12     	; 0x4a4 <GPIO_VidSetPinValue+0x12>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	e1 f1       	breq	.+120    	; 0x514 <GPIO_VidSetPinValue+0x82>
 49c:	83 30       	cpi	r24, 0x03	; 3
 49e:	09 f4       	brne	.+2      	; 0x4a2 <GPIO_VidSetPinValue+0x10>
 4a0:	54 c0       	rjmp	.+168    	; 0x54a <GPIO_VidSetPinValue+0xb8>
 4a2:	08 95       	ret
    {
    case GPIO_PORTA :
        if(Copy_u8Value==LOW)
 4a4:	41 11       	cpse	r20, r1
 4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <GPIO_VidSetPinValue+0x2e>
             CLR_BIT(PORTA , Copy_u8Pin);
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_VidSetPinValue+0x22>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_VidSetPinValue+0x1e>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret
        else if (Copy_u8Value==HIGH)     
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <GPIO_VidSetPinValue+0x34>
 4c4:	5c c0       	rjmp	.+184    	; 0x57e <GPIO_VidSetPinValue+0xec>
            SET_BIT(PORTA,Copy_u8Pin);
 4c6:	2b b3       	in	r18, 0x1b	; 27
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <GPIO_VidSetPinValue+0x40>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <GPIO_VidSetPinValue+0x3c>
 4d6:	82 2b       	or	r24, r18
 4d8:	8b bb       	out	0x1b, r24	; 27
 4da:	08 95       	ret
        break;
    case GPIO_PORTB :
         if(Copy_u8Value==LOW)
 4dc:	41 11       	cpse	r20, r1
 4de:	0c c0       	rjmp	.+24     	; 0x4f8 <GPIO_VidSetPinValue+0x66>
             CLR_BIT(PORTB , Copy_u8Pin);
 4e0:	28 b3       	in	r18, 0x18	; 24
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_VidSetPinValue+0x5a>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_VidSetPinValue+0x56>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	88 bb       	out	0x18, r24	; 24
 4f6:	08 95       	ret
        else if (Copy_u8Value==HIGH)     
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	09 f0       	breq	.+2      	; 0x4fe <GPIO_VidSetPinValue+0x6c>
 4fc:	40 c0       	rjmp	.+128    	; 0x57e <GPIO_VidSetPinValue+0xec>
            SET_BIT(PORTB,Copy_u8Pin);
 4fe:	28 b3       	in	r18, 0x18	; 24
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <GPIO_VidSetPinValue+0x78>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <GPIO_VidSetPinValue+0x74>
 50e:	82 2b       	or	r24, r18
 510:	88 bb       	out	0x18, r24	; 24
 512:	08 95       	ret
        break;
    case GPIO_PORTC :
         if(Copy_u8Value==LOW)
 514:	41 11       	cpse	r20, r1
 516:	0c c0       	rjmp	.+24     	; 0x530 <GPIO_VidSetPinValue+0x9e>
             CLR_BIT(PORTC , Copy_u8Pin);
 518:	25 b3       	in	r18, 0x15	; 21
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <GPIO_VidSetPinValue+0x92>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <GPIO_VidSetPinValue+0x8e>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	85 bb       	out	0x15, r24	; 21
 52e:	08 95       	ret
        else if (Copy_u8Value==HIGH)     
 530:	41 30       	cpi	r20, 0x01	; 1
 532:	29 f5       	brne	.+74     	; 0x57e <GPIO_VidSetPinValue+0xec>
            SET_BIT(PORTC,Copy_u8Pin);
 534:	25 b3       	in	r18, 0x15	; 21
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <GPIO_VidSetPinValue+0xae>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <GPIO_VidSetPinValue+0xaa>
 544:	82 2b       	or	r24, r18
 546:	85 bb       	out	0x15, r24	; 21
 548:	08 95       	ret
        break;
    case GPIO_PORTD :
         if(Copy_u8Value==LOW)
 54a:	41 11       	cpse	r20, r1
 54c:	0c c0       	rjmp	.+24     	; 0x566 <GPIO_VidSetPinValue+0xd4>
             CLR_BIT(PORTD , Copy_u8Pin);
 54e:	22 b3       	in	r18, 0x12	; 18
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <GPIO_VidSetPinValue+0xc8>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <GPIO_VidSetPinValue+0xc4>
 55e:	80 95       	com	r24
 560:	82 23       	and	r24, r18
 562:	82 bb       	out	0x12, r24	; 18
 564:	08 95       	ret
        else if (Copy_u8Value==HIGH)     
 566:	41 30       	cpi	r20, 0x01	; 1
 568:	51 f4       	brne	.+20     	; 0x57e <GPIO_VidSetPinValue+0xec>
            SET_BIT(PORTD,Copy_u8Pin);
 56a:	22 b3       	in	r18, 0x12	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <GPIO_VidSetPinValue+0xe4>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <GPIO_VidSetPinValue+0xe0>
 57a:	82 2b       	or	r24, r18
 57c:	82 bb       	out	0x12, r24	; 18
 57e:	08 95       	ret

00000580 <GPIO_u8GetPinValue>:
    }
}
u8 GPIO_u8GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin )
{
    u8 LOC_u8Result = 0 ;
    switch(Copy_u8Port)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	79 f0       	breq	.+30     	; 0x5a2 <GPIO_u8GetPinValue+0x22>
 584:	28 f0       	brcs	.+10     	; 0x590 <GPIO_u8GetPinValue+0x10>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	a9 f0       	breq	.+42     	; 0x5b4 <GPIO_u8GetPinValue+0x34>
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	e1 f0       	breq	.+56     	; 0x5c6 <GPIO_u8GetPinValue+0x46>
 58e:	24 c0       	rjmp	.+72     	; 0x5d8 <GPIO_u8GetPinValue+0x58>
    {
    case GPIO_PORTA :
       LOC_u8Result= GET_BIT(PINA,Copy_u8Pin) ;
 590:	89 b3       	in	r24, 0x19	; 25
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <GPIO_u8GetPinValue+0x1a>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <GPIO_u8GetPinValue+0x16>
 59e:	81 70       	andi	r24, 0x01	; 1
        break;
 5a0:	08 95       	ret
    case GPIO_PORTB :
       LOC_u8Result= GET_BIT(PINA,Copy_u8Pin) ;
 5a2:	89 b3       	in	r24, 0x19	; 25
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <GPIO_u8GetPinValue+0x2c>
 5a8:	95 95       	asr	r25
 5aa:	87 95       	ror	r24
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <GPIO_u8GetPinValue+0x28>
 5b0:	81 70       	andi	r24, 0x01	; 1
        break;
 5b2:	08 95       	ret
    case GPIO_PORTC :
        LOC_u8Result= GET_BIT(PINA,Copy_u8Pin) ;
 5b4:	89 b3       	in	r24, 0x19	; 25
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <GPIO_u8GetPinValue+0x3e>
 5ba:	95 95       	asr	r25
 5bc:	87 95       	ror	r24
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <GPIO_u8GetPinValue+0x3a>
 5c2:	81 70       	andi	r24, 0x01	; 1
        break;
 5c4:	08 95       	ret
    case GPIO_PORTD :
        LOC_u8Result= GET_BIT(PINA,Copy_u8Pin) ;
 5c6:	89 b3       	in	r24, 0x19	; 25
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <GPIO_u8GetPinValue+0x50>
 5cc:	95 95       	asr	r25
 5ce:	87 95       	ror	r24
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <GPIO_u8GetPinValue+0x4c>
 5d4:	81 70       	andi	r24, 0x01	; 1
        break;
 5d6:	08 95       	ret
        break;
    }
}
u8 GPIO_u8GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin )
{
    u8 LOC_u8Result = 0 ;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
        break;
    default:
        break;
    }
    return LOC_u8Result;
}
 5da:	08 95       	ret

000005dc <TEMP_VidReadValue>:
        UART_VidSendString((u8*)"No one is moving");
}

/******This function is to read an digital value from IR sensor and send the data using uart*****/
void IR_VidReadValue()
{
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16ReadChannel>
 5e2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <adc_result1+0x1>
 5e6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <adc_result1>
 5ea:	bc 01       	movw	r22, r24
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__floatunsisf>
 5f4:	26 ef       	ldi	r18, 0xF6	; 246
 5f6:	38 e2       	ldi	r19, 0x28	; 40
 5f8:	4c e9       	ldi	r20, 0x9C	; 156
 5fa:	50 e4       	ldi	r21, 0x40	; 64
 5fc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__mulsf3>
 600:	0e 94 3a 04 	call	0x874	; 0x874 <__fixsfsi>
 604:	07 2e       	mov	r0, r23
 606:	00 0c       	add	r0, r0
 608:	88 0b       	sbc	r24, r24
 60a:	99 0b       	sbc	r25, r25
 60c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__floatsisf>
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	40 e2       	ldi	r20, 0x20	; 32
 616:	51 e4       	ldi	r21, 0x41	; 65
 618:	0e 94 c8 03 	call	0x790	; 0x790 <__divsf3>
 61c:	0e 94 3a 04 	call	0x874	; 0x874 <__fixsfsi>
 620:	dc 01       	movw	r26, r24
 622:	cb 01       	movw	r24, r22
 624:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <temp+0x1>
 628:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <temp>
 62c:	4a e0       	ldi	r20, 0x0A	; 10
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	6a e7       	ldi	r22, 0x7A	; 122
 632:	71 e0       	ldi	r23, 0x01	; 1
 634:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 640:	8a e7       	ldi	r24, 0x7A	; 122
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 648:	86 e2       	ldi	r24, 0x26	; 38
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	83 ed       	ldi	r24, 0xD3	; 211
 654:	90 e3       	ldi	r25, 0x30	; 48
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <TEMP_VidReadValue+0x7a>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <TEMP_VidReadValue+0x84>
 660:	00 00       	nop
 662:	08 95       	ret

00000664 <GAS_VidReadValue>:
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_u16ReadChannel>
 66a:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <adc_result0+0x1>
 66e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <adc_result0>
 672:	4a e0       	ldi	r20, 0x0A	; 10
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	6e e6       	ldi	r22, 0x6E	; 110
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	0e 94 6b 05 	call	0xad6	; 0xad6 <itoa>
 67e:	8e e6       	ldi	r24, 0x6E	; 110
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 686:	08 95       	ret

00000688 <PIR_VidReadValue>:
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 c0 02 	call	0x580	; 0x580 <GPIO_u8GetPinValue>
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	29 f4       	brne	.+10     	; 0x69e <PIR_VidReadValue+0x16>
 694:	8a e2       	ldi	r24, 0x2A	; 42
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 69c:	08 95       	ret
 69e:	89 e4       	ldi	r24, 0x49	; 73
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	0e 94 a4 03 	call	0x748	; 0x748 <UART_VidSendString>
 6a6:	08 95       	ret

000006a8 <main>:
	
}
int main(void)
{

    GPIO_VidSetPinDirection(GPIO_PORTB,PIN0,INPUT);  //This pin is for operating the PIR sensor
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <GPIO_VidSetPinDirection>
	UART_VidInit();	
 6b2:	0e 94 92 03 	call	0x724	; 0x724 <UART_VidInit>
	ADC_VidInit();	 
 6b6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_VidInit>
    ESP8266_VidInit();
 6ba:	0e 94 8d 01 	call	0x31a	; 0x31a <ESP8266_VidInit>
    ESP8266_VidConnectToWiFi("ssid","pass");
 6be:	6a e5       	ldi	r22, 0x5A	; 90
 6c0:	71 e0       	ldi	r23, 0x01	; 1
 6c2:	8f e5       	ldi	r24, 0x5F	; 95
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 ac 01 	call	0x358	; 0x358 <ESP8266_VidConnectToWiFi>
    
    while (1) 
    {
	 /* DHT11 operating */	
	 DHT11_VidStart();    
 6ca:	0e 94 9b 00 	call	0x136	; 0x136 <DHT11_VidStart>
 6ce:	2f ef       	ldi	r18, 0xFF	; 255
 6d0:	87 ea       	ldi	r24, 0xA7	; 167
 6d2:	91 e6       	ldi	r25, 0x61	; 97
 6d4:	21 50       	subi	r18, 0x01	; 1
 6d6:	80 40       	sbci	r24, 0x00	; 0
 6d8:	90 40       	sbci	r25, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0x2c>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x36>
 6de:	00 00       	nop
	 _delay_ms(2000); //to call the DHT11_VidStart() again  

	 /* MQ-135 operating */
	   GAS_VidReadValue();
 6e0:	0e 94 32 03 	call	0x664	; 0x664 <GAS_VidReadValue>
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	87 ea       	ldi	r24, 0xA7	; 167
 6e8:	91 e6       	ldi	r25, 0x61	; 97
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <main+0x42>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <main+0x4c>
 6f4:	00 00       	nop
	  _delay_ms(2000);
     /*lm-35 operating */
	 TEMP_VidReadValue();
 6f6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <TEMP_VidReadValue>
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	87 ea       	ldi	r24, 0xA7	; 167
 6fe:	91 e6       	ldi	r25, 0x61	; 97
 700:	21 50       	subi	r18, 0x01	; 1
 702:	80 40       	sbci	r24, 0x00	; 0
 704:	90 40       	sbci	r25, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <main+0x58>
 708:	00 c0       	rjmp	.+0      	; 0x70a <main+0x62>
 70a:	00 00       	nop
     _delay_ms(2000);

	 /*PIR operating */	  
	 PIR_VidReadValue();
 70c:	0e 94 44 03 	call	0x688	; 0x688 <PIR_VidReadValue>
 710:	2f ef       	ldi	r18, 0xFF	; 255
 712:	87 ea       	ldi	r24, 0xA7	; 167
 714:	91 e6       	ldi	r25, 0x61	; 97
 716:	21 50       	subi	r18, 0x01	; 1
 718:	80 40       	sbci	r24, 0x00	; 0
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	e1 f7       	brne	.-8      	; 0x716 <main+0x6e>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <main+0x78>
 720:	00 00       	nop
 722:	d3 cf       	rjmp	.-90     	; 0x6ca <main+0x22>

00000724 <UART_VidInit>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

u8 Copy_DataString[20] ={0};
void UART_VidInit()
{
    UCSRA = (1<<U2X);
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	8b b9       	out	0x0b, r24	; 11
    UCSRB = (1<<RXEN) | (1<<TXEN);
 728:	88 e1       	ldi	r24, 0x18	; 24
 72a:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 72c:	86 e8       	ldi	r24, 0x86	; 134
 72e:	80 bd       	out	0x20, r24	; 32
    UBRRH = BAUD_PRESCALE>>8;
 730:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;    
 732:	80 e1       	ldi	r24, 0x10	; 16
 734:	89 b9       	out	0x09, r24	; 9
 736:	08 95       	ret

00000738 <UART_VidSentByte>:
}

void UART_VidSentByte(u8 Copy_u8Data)
{  
   /* Put data into buffer, sends the data */
   while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 738:	5d 9b       	sbis	0x0b, 5	; 11
 73a:	fe cf       	rjmp	.-4      	; 0x738 <UART_VidSentByte>
   UDR = Copy_u8Data;   
 73c:	8c b9       	out	0x0c, r24	; 12
 73e:	08 95       	ret

00000740 <UART_VidReceveByte>:
}
u8   UART_VidReceveByte()
{
    /* Wait for data to be received */
    while(GET_BIT(UART_UCSRA , 7) == 0);
 740:	5f 9b       	sbis	0x0b, 7	; 11
 742:	fe cf       	rjmp	.-4      	; 0x740 <UART_VidReceveByte>
    /* Get and return received data from buffer */
    return UDR;
 744:	8c b1       	in	r24, 0x0c	; 12
}
 746:	08 95       	ret

00000748 <UART_VidSendString>:

void UART_VidSendString( u8 * Copy_ptrString ){
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	8c 01       	movw	r16, r24

	u8 LOC_u8Iterator = 0 ;
 750:	c0 e0       	ldi	r28, 0x00	; 0

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' )
 752:	03 c0       	rjmp	.+6      	; 0x75a <UART_VidSendString+0x12>
    {

		UART_VidSentByte( Copy_ptrString[ LOC_u8Iterator ] );
 754:	0e 94 9c 03 	call	0x738	; 0x738 <UART_VidSentByte>
		LOC_u8Iterator++ ;
 758:	cf 5f       	subi	r28, 0xFF	; 255

void UART_VidSendString( u8 * Copy_ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while ( Copy_ptrString[ LOC_u8Iterator ] != '\0' )
 75a:	f8 01       	movw	r30, r16
 75c:	ec 0f       	add	r30, r28
 75e:	f1 1d       	adc	r31, r1
 760:	80 81       	ld	r24, Z
 762:	81 11       	cpse	r24, r1
 764:	f7 cf       	rjmp	.-18     	; 0x754 <UART_VidSendString+0xc>

		UART_VidSentByte( Copy_ptrString[ LOC_u8Iterator ] );
		LOC_u8Iterator++ ;
	}

}
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <WDT_VidON>:
	SET_BIT(WDTCR,WDP2);
	SET_BIT(WDTCR,WDP1);
	SET_BIT(WDTCR,WDP0);

	#elif  WDT_TIME == 1
	SET_BIT(WDTCR,WDE );
 76e:	81 b5       	in	r24, 0x21	; 33
 770:	88 60       	ori	r24, 0x08	; 8
 772:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR,WDP2);
 774:	81 b5       	in	r24, 0x21	; 33
 776:	84 60       	ori	r24, 0x04	; 4
 778:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR,WDP1);
 77a:	81 b5       	in	r24, 0x21	; 33
 77c:	82 60       	ori	r24, 0x02	; 2
 77e:	81 bd       	out	0x21, r24	; 33
	CLR_BIT(WDTCR,WDP0);	
 780:	81 b5       	in	r24, 0x21	; 33
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	81 bd       	out	0x21, r24	; 33
 786:	08 95       	ret

00000788 <WDT_VidOFF>:
}


void WDT_VidOFF(void)
{
	WDTCR = (1<<WDTOE)|(1<<WDE);
 788:	88 e1       	ldi	r24, 0x18	; 24
 78a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
 78c:	11 bc       	out	0x21, r1	; 33
 78e:	08 95       	ret

00000790 <__divsf3>:
 790:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divsf3x>
 794:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_round>
 798:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscB>
 79c:	58 f0       	brcs	.+22     	; 0x7b4 <__divsf3+0x24>
 79e:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_pscA>
 7a2:	40 f0       	brcs	.+16     	; 0x7b4 <__divsf3+0x24>
 7a4:	29 f4       	brne	.+10     	; 0x7b0 <__divsf3+0x20>
 7a6:	5f 3f       	cpi	r21, 0xFF	; 255
 7a8:	29 f0       	breq	.+10     	; 0x7b4 <__divsf3+0x24>
 7aa:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 7ae:	51 11       	cpse	r21, r1
 7b0:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>
 7b4:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_nan>

000007b8 <__divsf3x>:
 7b8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_split3>
 7bc:	68 f3       	brcs	.-38     	; 0x798 <__divsf3+0x8>

000007be <__divsf3_pse>:
 7be:	99 23       	and	r25, r25
 7c0:	b1 f3       	breq	.-20     	; 0x7ae <__divsf3+0x1e>
 7c2:	55 23       	and	r21, r21
 7c4:	91 f3       	breq	.-28     	; 0x7aa <__divsf3+0x1a>
 7c6:	95 1b       	sub	r25, r21
 7c8:	55 0b       	sbc	r21, r21
 7ca:	bb 27       	eor	r27, r27
 7cc:	aa 27       	eor	r26, r26
 7ce:	62 17       	cp	r22, r18
 7d0:	73 07       	cpc	r23, r19
 7d2:	84 07       	cpc	r24, r20
 7d4:	38 f0       	brcs	.+14     	; 0x7e4 <__divsf3_pse+0x26>
 7d6:	9f 5f       	subi	r25, 0xFF	; 255
 7d8:	5f 4f       	sbci	r21, 0xFF	; 255
 7da:	22 0f       	add	r18, r18
 7dc:	33 1f       	adc	r19, r19
 7de:	44 1f       	adc	r20, r20
 7e0:	aa 1f       	adc	r26, r26
 7e2:	a9 f3       	breq	.-22     	; 0x7ce <__divsf3_pse+0x10>
 7e4:	35 d0       	rcall	.+106    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7e6:	0e 2e       	mov	r0, r30
 7e8:	3a f0       	brmi	.+14     	; 0x7f8 <__divsf3_pse+0x3a>
 7ea:	e0 e8       	ldi	r30, 0x80	; 128
 7ec:	32 d0       	rcall	.+100    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 7ee:	91 50       	subi	r25, 0x01	; 1
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	e6 95       	lsr	r30
 7f4:	00 1c       	adc	r0, r0
 7f6:	ca f7       	brpl	.-14     	; 0x7ea <__divsf3_pse+0x2c>
 7f8:	2b d0       	rcall	.+86     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7fa:	fe 2f       	mov	r31, r30
 7fc:	29 d0       	rcall	.+82     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	bb 1f       	adc	r27, r27
 806:	26 17       	cp	r18, r22
 808:	37 07       	cpc	r19, r23
 80a:	48 07       	cpc	r20, r24
 80c:	ab 07       	cpc	r26, r27
 80e:	b0 e8       	ldi	r27, 0x80	; 128
 810:	09 f0       	breq	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	bb 0b       	sbc	r27, r27
 814:	80 2d       	mov	r24, r0
 816:	bf 01       	movw	r22, r30
 818:	ff 27       	eor	r31, r31
 81a:	93 58       	subi	r25, 0x83	; 131
 81c:	5f 4f       	sbci	r21, 0xFF	; 255
 81e:	3a f0       	brmi	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 820:	9e 3f       	cpi	r25, 0xFE	; 254
 822:	51 05       	cpc	r21, r1
 824:	78 f0       	brcs	.+30     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 826:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 82a:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	e4 f3       	brlt	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 832:	98 3e       	cpi	r25, 0xE8	; 232
 834:	d4 f3       	brlt	.-12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 836:	86 95       	lsr	r24
 838:	77 95       	ror	r23
 83a:	67 95       	ror	r22
 83c:	b7 95       	ror	r27
 83e:	f7 95       	ror	r31
 840:	9f 5f       	subi	r25, 0xFF	; 255
 842:	c9 f7       	brne	.-14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 844:	88 0f       	add	r24, r24
 846:	91 1d       	adc	r25, r1
 848:	96 95       	lsr	r25
 84a:	87 95       	ror	r24
 84c:	97 f9       	bld	r25, 7
 84e:	08 95       	ret
 850:	e1 e0       	ldi	r30, 0x01	; 1
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	bb 1f       	adc	r27, r27
 85a:	62 17       	cp	r22, r18
 85c:	73 07       	cpc	r23, r19
 85e:	84 07       	cpc	r24, r20
 860:	ba 07       	cpc	r27, r26
 862:	20 f0       	brcs	.+8      	; 0x86c <__stack+0xd>
 864:	62 1b       	sub	r22, r18
 866:	73 0b       	sbc	r23, r19
 868:	84 0b       	sbc	r24, r20
 86a:	ba 0b       	sbc	r27, r26
 86c:	ee 1f       	adc	r30, r30
 86e:	88 f7       	brcc	.-30     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 870:	e0 95       	com	r30
 872:	08 95       	ret

00000874 <__fixsfsi>:
 874:	0e 94 41 04 	call	0x882	; 0x882 <__fixunssfsi>
 878:	68 94       	set
 87a:	b1 11       	cpse	r27, r1
 87c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>
 880:	08 95       	ret

00000882 <__fixunssfsi>:
 882:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_splitA>
 886:	88 f0       	brcs	.+34     	; 0x8aa <__fixunssfsi+0x28>
 888:	9f 57       	subi	r25, 0x7F	; 127
 88a:	98 f0       	brcs	.+38     	; 0x8b2 <__fixunssfsi+0x30>
 88c:	b9 2f       	mov	r27, r25
 88e:	99 27       	eor	r25, r25
 890:	b7 51       	subi	r27, 0x17	; 23
 892:	b0 f0       	brcs	.+44     	; 0x8c0 <__fixunssfsi+0x3e>
 894:	e1 f0       	breq	.+56     	; 0x8ce <__fixunssfsi+0x4c>
 896:	66 0f       	add	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	1a f0       	brmi	.+6      	; 0x8a6 <__fixunssfsi+0x24>
 8a0:	ba 95       	dec	r27
 8a2:	c9 f7       	brne	.-14     	; 0x896 <__fixunssfsi+0x14>
 8a4:	14 c0       	rjmp	.+40     	; 0x8ce <__fixunssfsi+0x4c>
 8a6:	b1 30       	cpi	r27, 0x01	; 1
 8a8:	91 f0       	breq	.+36     	; 0x8ce <__fixunssfsi+0x4c>
 8aa:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_zero>
 8ae:	b1 e0       	ldi	r27, 0x01	; 1
 8b0:	08 95       	ret
 8b2:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__fp_zero>
 8b6:	67 2f       	mov	r22, r23
 8b8:	78 2f       	mov	r23, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	b8 5f       	subi	r27, 0xF8	; 248
 8be:	39 f0       	breq	.+14     	; 0x8ce <__fixunssfsi+0x4c>
 8c0:	b9 3f       	cpi	r27, 0xF9	; 249
 8c2:	cc f3       	brlt	.-14     	; 0x8b6 <__fixunssfsi+0x34>
 8c4:	86 95       	lsr	r24
 8c6:	77 95       	ror	r23
 8c8:	67 95       	ror	r22
 8ca:	b3 95       	inc	r27
 8cc:	d9 f7       	brne	.-10     	; 0x8c4 <__fixunssfsi+0x42>
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__fixunssfsi+0x5c>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__floatunsisf>:
 8e0:	e8 94       	clt
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__floatsisf+0x12>

000008e4 <__floatsisf>:
 8e4:	97 fb       	bst	r25, 7
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__floatsisf+0x12>
 8e8:	90 95       	com	r25
 8ea:	80 95       	com	r24
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	99 23       	and	r25, r25
 8f8:	a9 f0       	breq	.+42     	; 0x924 <__floatsisf+0x40>
 8fa:	f9 2f       	mov	r31, r25
 8fc:	96 e9       	ldi	r25, 0x96	; 150
 8fe:	bb 27       	eor	r27, r27
 900:	93 95       	inc	r25
 902:	f6 95       	lsr	r31
 904:	87 95       	ror	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f1 11       	cpse	r31, r1
 90e:	f8 cf       	rjmp	.-16     	; 0x900 <__floatsisf+0x1c>
 910:	fa f4       	brpl	.+62     	; 0x950 <__floatsisf+0x6c>
 912:	bb 0f       	add	r27, r27
 914:	11 f4       	brne	.+4      	; 0x91a <__floatsisf+0x36>
 916:	60 ff       	sbrs	r22, 0
 918:	1b c0       	rjmp	.+54     	; 0x950 <__floatsisf+0x6c>
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	16 c0       	rjmp	.+44     	; 0x950 <__floatsisf+0x6c>
 924:	88 23       	and	r24, r24
 926:	11 f0       	breq	.+4      	; 0x92c <__floatsisf+0x48>
 928:	96 e9       	ldi	r25, 0x96	; 150
 92a:	11 c0       	rjmp	.+34     	; 0x94e <__floatsisf+0x6a>
 92c:	77 23       	and	r23, r23
 92e:	21 f0       	breq	.+8      	; 0x938 <__floatsisf+0x54>
 930:	9e e8       	ldi	r25, 0x8E	; 142
 932:	87 2f       	mov	r24, r23
 934:	76 2f       	mov	r23, r22
 936:	05 c0       	rjmp	.+10     	; 0x942 <__floatsisf+0x5e>
 938:	66 23       	and	r22, r22
 93a:	71 f0       	breq	.+28     	; 0x958 <__floatsisf+0x74>
 93c:	96 e8       	ldi	r25, 0x86	; 134
 93e:	86 2f       	mov	r24, r22
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	2a f0       	brmi	.+10     	; 0x950 <__floatsisf+0x6c>
 946:	9a 95       	dec	r25
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	da f7       	brpl	.-10     	; 0x946 <__floatsisf+0x62>
 950:	88 0f       	add	r24, r24
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__fp_inf>:
 95a:	97 f9       	bld	r25, 7
 95c:	9f 67       	ori	r25, 0x7F	; 127
 95e:	80 e8       	ldi	r24, 0x80	; 128
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	08 95       	ret

00000966 <__fp_nan>:
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	80 ec       	ldi	r24, 0xC0	; 192
 96a:	08 95       	ret

0000096c <__fp_pscA>:
 96c:	00 24       	eor	r0, r0
 96e:	0a 94       	dec	r0
 970:	16 16       	cp	r1, r22
 972:	17 06       	cpc	r1, r23
 974:	18 06       	cpc	r1, r24
 976:	09 06       	cpc	r0, r25
 978:	08 95       	ret

0000097a <__fp_pscB>:
 97a:	00 24       	eor	r0, r0
 97c:	0a 94       	dec	r0
 97e:	12 16       	cp	r1, r18
 980:	13 06       	cpc	r1, r19
 982:	14 06       	cpc	r1, r20
 984:	05 06       	cpc	r0, r21
 986:	08 95       	ret

00000988 <__fp_round>:
 988:	09 2e       	mov	r0, r25
 98a:	03 94       	inc	r0
 98c:	00 0c       	add	r0, r0
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0xc>
 990:	88 23       	and	r24, r24
 992:	52 f0       	brmi	.+20     	; 0x9a8 <__fp_round+0x20>
 994:	bb 0f       	add	r27, r27
 996:	40 f4       	brcc	.+16     	; 0x9a8 <__fp_round+0x20>
 998:	bf 2b       	or	r27, r31
 99a:	11 f4       	brne	.+4      	; 0x9a0 <__fp_round+0x18>
 99c:	60 ff       	sbrs	r22, 0
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__fp_round+0x20>
 9a0:	6f 5f       	subi	r22, 0xFF	; 255
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__fp_split3>:
 9aa:	57 fd       	sbrc	r21, 7
 9ac:	90 58       	subi	r25, 0x80	; 128
 9ae:	44 0f       	add	r20, r20
 9b0:	55 1f       	adc	r21, r21
 9b2:	59 f0       	breq	.+22     	; 0x9ca <__fp_splitA+0x10>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__fp_splitA+0x1a>
 9b8:	47 95       	ror	r20

000009ba <__fp_splitA>:
 9ba:	88 0f       	add	r24, r24
 9bc:	97 fb       	bst	r25, 7
 9be:	99 1f       	adc	r25, r25
 9c0:	61 f0       	breq	.+24     	; 0x9da <__fp_splitA+0x20>
 9c2:	9f 3f       	cpi	r25, 0xFF	; 255
 9c4:	79 f0       	breq	.+30     	; 0x9e4 <__fp_splitA+0x2a>
 9c6:	87 95       	ror	r24
 9c8:	08 95       	ret
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	f2 cf       	rjmp	.-28     	; 0x9b8 <__fp_split3+0xe>
 9d4:	46 95       	lsr	r20
 9d6:	f1 df       	rcall	.-30     	; 0x9ba <__fp_splitA>
 9d8:	08 c0       	rjmp	.+16     	; 0x9ea <__fp_splitA+0x30>
 9da:	16 16       	cp	r1, r22
 9dc:	17 06       	cpc	r1, r23
 9de:	18 06       	cpc	r1, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	f1 cf       	rjmp	.-30     	; 0x9c6 <__fp_splitA+0xc>
 9e4:	86 95       	lsr	r24
 9e6:	71 05       	cpc	r23, r1
 9e8:	61 05       	cpc	r22, r1
 9ea:	08 94       	sec
 9ec:	08 95       	ret

000009ee <__fp_zero>:
 9ee:	e8 94       	clt

000009f0 <__fp_szero>:
 9f0:	bb 27       	eor	r27, r27
 9f2:	66 27       	eor	r22, r22
 9f4:	77 27       	eor	r23, r23
 9f6:	cb 01       	movw	r24, r22
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <__mulsf3>:
 9fc:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3x>
 a00:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_round>
 a04:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_pscA>
 a08:	38 f0       	brcs	.+14     	; 0xa18 <__mulsf3+0x1c>
 a0a:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_pscB>
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__mulsf3+0x1c>
 a10:	95 23       	and	r25, r21
 a12:	11 f0       	breq	.+4      	; 0xa18 <__mulsf3+0x1c>
 a14:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 a18:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_nan>
 a1c:	11 24       	eor	r1, r1
 a1e:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>

00000a22 <__mulsf3x>:
 a22:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_split3>
 a26:	70 f3       	brcs	.-36     	; 0xa04 <__mulsf3+0x8>

00000a28 <__mulsf3_pse>:
 a28:	95 9f       	mul	r25, r21
 a2a:	c1 f3       	breq	.-16     	; 0xa1c <__mulsf3+0x20>
 a2c:	95 0f       	add	r25, r21
 a2e:	50 e0       	ldi	r21, 0x00	; 0
 a30:	55 1f       	adc	r21, r21
 a32:	62 9f       	mul	r22, r18
 a34:	f0 01       	movw	r30, r0
 a36:	72 9f       	mul	r23, r18
 a38:	bb 27       	eor	r27, r27
 a3a:	f0 0d       	add	r31, r0
 a3c:	b1 1d       	adc	r27, r1
 a3e:	63 9f       	mul	r22, r19
 a40:	aa 27       	eor	r26, r26
 a42:	f0 0d       	add	r31, r0
 a44:	b1 1d       	adc	r27, r1
 a46:	aa 1f       	adc	r26, r26
 a48:	64 9f       	mul	r22, r20
 a4a:	66 27       	eor	r22, r22
 a4c:	b0 0d       	add	r27, r0
 a4e:	a1 1d       	adc	r26, r1
 a50:	66 1f       	adc	r22, r22
 a52:	82 9f       	mul	r24, r18
 a54:	22 27       	eor	r18, r18
 a56:	b0 0d       	add	r27, r0
 a58:	a1 1d       	adc	r26, r1
 a5a:	62 1f       	adc	r22, r18
 a5c:	73 9f       	mul	r23, r19
 a5e:	b0 0d       	add	r27, r0
 a60:	a1 1d       	adc	r26, r1
 a62:	62 1f       	adc	r22, r18
 a64:	83 9f       	mul	r24, r19
 a66:	a0 0d       	add	r26, r0
 a68:	61 1d       	adc	r22, r1
 a6a:	22 1f       	adc	r18, r18
 a6c:	74 9f       	mul	r23, r20
 a6e:	33 27       	eor	r19, r19
 a70:	a0 0d       	add	r26, r0
 a72:	61 1d       	adc	r22, r1
 a74:	23 1f       	adc	r18, r19
 a76:	84 9f       	mul	r24, r20
 a78:	60 0d       	add	r22, r0
 a7a:	21 1d       	adc	r18, r1
 a7c:	82 2f       	mov	r24, r18
 a7e:	76 2f       	mov	r23, r22
 a80:	6a 2f       	mov	r22, r26
 a82:	11 24       	eor	r1, r1
 a84:	9f 57       	subi	r25, 0x7F	; 127
 a86:	50 40       	sbci	r21, 0x00	; 0
 a88:	9a f0       	brmi	.+38     	; 0xab0 <__mulsf3_pse+0x88>
 a8a:	f1 f0       	breq	.+60     	; 0xac8 <__mulsf3_pse+0xa0>
 a8c:	88 23       	and	r24, r24
 a8e:	4a f0       	brmi	.+18     	; 0xaa2 <__mulsf3_pse+0x7a>
 a90:	ee 0f       	add	r30, r30
 a92:	ff 1f       	adc	r31, r31
 a94:	bb 1f       	adc	r27, r27
 a96:	66 1f       	adc	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	50 40       	sbci	r21, 0x00	; 0
 aa0:	a9 f7       	brne	.-22     	; 0xa8c <__mulsf3_pse+0x64>
 aa2:	9e 3f       	cpi	r25, 0xFE	; 254
 aa4:	51 05       	cpc	r21, r1
 aa6:	80 f0       	brcs	.+32     	; 0xac8 <__mulsf3_pse+0xa0>
 aa8:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_inf>
 aac:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_szero>
 ab0:	5f 3f       	cpi	r21, 0xFF	; 255
 ab2:	e4 f3       	brlt	.-8      	; 0xaac <__mulsf3_pse+0x84>
 ab4:	98 3e       	cpi	r25, 0xE8	; 232
 ab6:	d4 f3       	brlt	.-12     	; 0xaac <__mulsf3_pse+0x84>
 ab8:	86 95       	lsr	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	b7 95       	ror	r27
 ac0:	f7 95       	ror	r31
 ac2:	e7 95       	ror	r30
 ac4:	9f 5f       	subi	r25, 0xFF	; 255
 ac6:	c1 f7       	brne	.-16     	; 0xab8 <__mulsf3_pse+0x90>
 ac8:	fe 2b       	or	r31, r30
 aca:	88 0f       	add	r24, r24
 acc:	91 1d       	adc	r25, r1
 ace:	96 95       	lsr	r25
 ad0:	87 95       	ror	r24
 ad2:	97 f9       	bld	r25, 7
 ad4:	08 95       	ret

00000ad6 <itoa>:
 ad6:	45 32       	cpi	r20, 0x25	; 37
 ad8:	51 05       	cpc	r21, r1
 ada:	20 f4       	brcc	.+8      	; 0xae4 <itoa+0xe>
 adc:	42 30       	cpi	r20, 0x02	; 2
 ade:	10 f0       	brcs	.+4      	; 0xae4 <itoa+0xe>
 ae0:	0c 94 76 05 	jmp	0xaec	; 0xaec <__itoa_ncheck>
 ae4:	fb 01       	movw	r30, r22
 ae6:	10 82       	st	Z, r1
 ae8:	cb 01       	movw	r24, r22
 aea:	08 95       	ret

00000aec <__itoa_ncheck>:
 aec:	bb 27       	eor	r27, r27
 aee:	4a 30       	cpi	r20, 0x0A	; 10
 af0:	31 f4       	brne	.+12     	; 0xafe <__itoa_ncheck+0x12>
 af2:	99 23       	and	r25, r25
 af4:	22 f4       	brpl	.+8      	; 0xafe <__itoa_ncheck+0x12>
 af6:	bd e2       	ldi	r27, 0x2D	; 45
 af8:	90 95       	com	r25
 afa:	81 95       	neg	r24
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__utoa_common>

00000b02 <__utoa_ncheck>:
 b02:	bb 27       	eor	r27, r27

00000b04 <__utoa_common>:
 b04:	fb 01       	movw	r30, r22
 b06:	55 27       	eor	r21, r21
 b08:	aa 27       	eor	r26, r26
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	aa 1f       	adc	r26, r26
 b10:	a4 17       	cp	r26, r20
 b12:	10 f0       	brcs	.+4      	; 0xb18 <__utoa_common+0x14>
 b14:	a4 1b       	sub	r26, r20
 b16:	83 95       	inc	r24
 b18:	50 51       	subi	r21, 0x10	; 16
 b1a:	b9 f7       	brne	.-18     	; 0xb0a <__utoa_common+0x6>
 b1c:	a0 5d       	subi	r26, 0xD0	; 208
 b1e:	aa 33       	cpi	r26, 0x3A	; 58
 b20:	08 f0       	brcs	.+2      	; 0xb24 <__utoa_common+0x20>
 b22:	a9 5d       	subi	r26, 0xD9	; 217
 b24:	a1 93       	st	Z+, r26
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	79 f7       	brne	.-34     	; 0xb08 <__utoa_common+0x4>
 b2a:	b1 11       	cpse	r27, r1
 b2c:	b1 93       	st	Z+, r27
 b2e:	11 92       	st	Z+, r1
 b30:	cb 01       	movw	r24, r22
 b32:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <strrev>

00000b36 <strrev>:
 b36:	dc 01       	movw	r26, r24
 b38:	fc 01       	movw	r30, r24
 b3a:	67 2f       	mov	r22, r23
 b3c:	71 91       	ld	r23, Z+
 b3e:	77 23       	and	r23, r23
 b40:	e1 f7       	brne	.-8      	; 0xb3a <strrev+0x4>
 b42:	32 97       	sbiw	r30, 0x02	; 2
 b44:	04 c0       	rjmp	.+8      	; 0xb4e <strrev+0x18>
 b46:	7c 91       	ld	r23, X
 b48:	6d 93       	st	X+, r22
 b4a:	70 83       	st	Z, r23
 b4c:	62 91       	ld	r22, -Z
 b4e:	ae 17       	cp	r26, r30
 b50:	bf 07       	cpc	r27, r31
 b52:	c8 f3       	brcs	.-14     	; 0xb46 <strrev+0x10>
 b54:	08 95       	ret

00000b56 <_exit>:
 b56:	f8 94       	cli

00000b58 <__stop_program>:
 b58:	ff cf       	rjmp	.-2      	; 0xb58 <__stop_program>
